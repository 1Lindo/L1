/*
Реализовать бинарный поиск встроенными методами языка.
*/

/*
Использую встроенную функцию sort.Search().
Она принимает на вход срез и функцию, которая определяет, является ли элемент меньше, равным или большим искомого значения.
Функция должна возвращать true, если элемент меньше искомого, и false в противном случае.
*/

package main

import (
	"fmt"
	"sort"
)

func main() {
	arr := []int{2, 4, 6, 8, 10, 12} //Срез для поиска
	x := 8                           //Заданный элемент для поиска

	/*
		Ищу x в отсортированном срезе arr.
		Функция sort.Search() возвращает индекс первого элемента, который больше или равен искомому значению x.
	*/
	i := sort.Search(len(arr), func(i int) bool { return arr[i] >= x })

	/*
		Проверяю, является ли найденный элемент равным x, и выводим соответствующее сообщение.
		Если значение не найдено, то вывожу сообщение об этом.
	*/
	if i < len(arr) && arr[i] == x {
		fmt.Printf("Значение %d найдено в индексе %d\n", x, i)
	} else {
		fmt.Printf("Значение %d не найдено\n", x)
	}
}
