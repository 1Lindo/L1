/*
Дана последовательность чисел: [2,4,6,8,10]. Найти сумму их квадратов(22+32+42….) с использованием конкурентных вычислений.
*/

/*
Используем синхронизацию через WaitGroup, чтобы дождаться завершения всех горутин и канал results для результатов вычислений.
Запускаем горутину для каждого числа из массива, которая рассчитает квадрат этого числа и отправит результат в канал results.
Запускаем горутину, которая ждет завершения всех горутин с помощью WaitGroup и закрывает канал results.
Проходимся по каналу results и суммируем результаты в переменную sum, которую выводим в stdout.
*/

package main

import (
	"fmt"
	"sync"
)

func main() {
	numbers := []int{2, 4, 6, 8, 10}
	var wg sync.WaitGroup     //Используем синхронизацию через WaitGroup.
	results := make(chan int) //Канал с результатами.

	for _, num := range numbers {
		wg.Add(1)
		go func(x int) {
			defer wg.Done()
			results <- x * x
		}(num) // Горутина для каждого числа массива рассчитывает его квадрат и отправляет результат в канал.
	}

	go func() {
		wg.Wait()
		close(results)
	}() // Горутина ждет завершения все остальных рутин через WaitGroup и закрывает канал.

	sum := 0 // в данной переменной суммируем результаты
	for res := range results {
		sum += res
	}

	fmt.Println("Сумма квадратов чисел:", sum)
}
